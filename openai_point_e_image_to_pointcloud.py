# -*- coding: utf-8 -*-
"""OpenAI Point-E_Image To_PointCloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ksd0h20iP3NRN1-41zkyw_MLKpS7mg35

## Point-E

<details>
<summary>1. Definition</summary>
  
- **Point-E combines two distinct models: a GLIDE model and an image-to-3D model. The GLIDE model is capable of generating images from text descriptions. On the other hand, the image-to-3D model is trained to create point clouds from images using a dataset of several million 3D renderings.**
It Can help To :
-**1-Generate Point Cloud From Image**
-**2-Generate Point Cloud From Text**
![Image Alt Text](https://raw.githubusercontent.com/openai/point-e/main/point_e/examples/paper_banner.gif)

</details>

<details>
<summary>2. Application of Point-E</summary>

- **Virtual Reality (VR) and Augmented Reality (AR):** Point-E simplifies the process of creating 3D models from images, making it valuable for VR and AR applications.
- **Data Augmentations : data collection can be challenging, but they can be effectively used for data augmentation** .
- **prototypes or mockups : Point-E can assist in quickly generating 3D prototypes or mockups based on textual descriptions, which can be helpful in the early stages of product development.**
</details>

Model 1 : Point Cloud Generation from Images

Check The GPU
"""

!nvidia-smi

"""### Install Main Libraries"""

! pip install plotly -q

!git clone https://github.com/openai/point-e

# Commented out IPython magic to ensure Python compatibility.
# %cd point-e

! pip install -e . -q

"""### Import the Using Libraries"""

from PIL import Image
import torch
from tqdm.auto import tqdm

from point_e.diffusion.configs import DIFFUSION_CONFIGS, diffusion_from_config
from point_e.diffusion.sampler import PointCloudSampler
from point_e.models.download import load_checkpoint
from point_e.models.configs import MODEL_CONFIGS, model_from_config
from point_e.util.plotting import plot_point_cloud

"""### The Model"""

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

print('creating base model...')
base_name = 'base40M'
base_model = model_from_config(MODEL_CONFIGS[base_name], device)
base_model.eval()
base_diffusion = diffusion_from_config(DIFFUSION_CONFIGS[base_name])

print('creating upsample model...')
upsampler_model = model_from_config(MODEL_CONFIGS['upsample'], device)
upsampler_model.eval()
upsampler_diffusion = diffusion_from_config(DIFFUSION_CONFIGS['upsample'])

print('downloading base checkpoint...')
base_model.load_state_dict(load_checkpoint(base_name, device))

print('downloading upsampler checkpoint...')
upsampler_model.load_state_dict(load_checkpoint('upsample', device))

sampler = PointCloudSampler(
    device=device,
    models=[base_model, upsampler_model],
    diffusions=[base_diffusion, upsampler_diffusion],
    num_points=[1024, 4096 - 1024],
    aux_channels=['R', 'G', 'B'],
    guidance_scale=[3.0, 3.0],
)

"""### Import Your Image"""

from google.colab import files
uploaded = files.upload()

# Load an image to condition on.
imgz = Image.open('large.jpeg')

# Produce a sample from the model.
samples = None
for x in tqdm(sampler.sample_batch_progressive(batch_size=1, model_kwargs=dict(images=[imgz]))):
    samples = x

imgz

#img

imgz

#img2

#Trial_3

"""### Sample the Image Into PointClouds"""

pc = sampler.output_to_point_clouds(samples)[0]

fig = plot_point_cloud(pc, grid_size=3, fixed_bounds=((-0.75, -0.75, -0.75),(0.75, 0.75, 0.75)))

fig = plot_point_cloud(pc, grid_size=3, fixed_bounds=((-0.75, -0.75, -0.75),(0.75, 0.75, 0.75)))

fig = plot_point_cloud(pc, grid_size=3, fixed_bounds=((-0.75, -0.75, -0.75),(0.75, 0.75, 0.75)))

fig = plot_point_cloud(pc, grid_size=3, fixed_bounds=((-0.75, -0.75, -0.75),(0.75, 0.75, 0.75)))

fig = plot_point_cloud(pc, grid_size=3, fixed_bounds=((-0.75, -0.75, -0.75),(0.75, 0.75, 0.75)))

import plotly.graph_objects as go

fig_plotly = go.Figure(
        data=[
            go.Scatter3d(
                x=pc.coords[:,0], y=pc.coords[:,1], z=pc.coords[:,2],
                mode='markers',
                marker=dict(
                  size=2,
                  color=['rgb({},{},{})'.format(r,g,b) for r,g,b in zip(pc.channels["R"], pc.channels["G"], pc.channels["B"])],
              )
            )
        ],
        layout=dict(
            scene=dict(
                xaxis=dict(visible=False),
                yaxis=dict(visible=False),
                zaxis=dict(visible=False)
            )
        ),
    )

fig_plotly.show(renderer="colab")

fig_plotly.show(renderer="colab")

fig_plotly.show(renderer="colab")

fig_plotly.show(renderer="colab")

fig_plotly.show(renderer="colab")

from point_e.util.pc_to_mesh import marching_cubes_mesh

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

print('creating SDF model...')
name = 'sdf'
model = model_from_config(MODEL_CONFIGS[name], device)
model.eval()

print('loading SDF model...')
model.load_state_dict(load_checkpoint(name, device))

import skimage.measure as measure

# Produce a mesh (with vertex colors)
mesh = marching_cubes_mesh(
    pc=pc,
    model=model,
    batch_size=4096,
    grid_size=32, # increase to 128 for resolution used in evals
    progress=True,
)

# Write the mesh to a PLY file to import into some other program.
with open('FFF.ply', 'wb') as f:
    mesh.write_ply(f)